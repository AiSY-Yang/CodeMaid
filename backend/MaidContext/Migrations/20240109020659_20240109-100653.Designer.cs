// <auto-generated />
using System;
using System.Text.Json;
using MaidContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MaidContexts.Migrations
{
    [DbContext(typeof(MaidContext))]
    [Migration("20240109020659_20240109-100653")]
    partial class _20240109100653
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.CodeMaid.AttributeDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Arguments")
                        .HasColumnType("text")
                        .HasComment("参数");

                    b.Property<string>("ArgumentsText")
                        .HasColumnType("text")
                        .HasComment("参数文本");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("创建时间");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("是否有效");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Attribute名称");

                    b.Property<long>("PropertyDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Attribute文本");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("更新时间");

                    b.HasKey("Id");

                    b.HasIndex("PropertyDefinitionId");

                    b.ToTable("AttributeDefinitions", t =>
                        {
                            t.HasComment("属性定义");
                        });
                });

            modelBuilder.Entity("Models.CodeMaid.ClassDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Base")
                        .HasColumnType("text")
                        .HasComment("基类或者接口名称");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("创建时间");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("是否有效");

                    b.Property<string>("LeadingTrivia")
                        .HasColumnType("text")
                        .HasComment("前导");

                    b.Property<long>("MaidId")
                        .HasColumnType("bigint")
                        .HasComment("Maid对象Id");

                    b.Property<int>("MemberType")
                        .HasColumnType("integer")
                        .HasComment("成员类型(0-类,1-接口,2-记录,3-结构体)");

                    b.Property<string>("Modifiers")
                        .HasColumnType("text")
                        .HasComment("修饰符");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("类名");

                    b.Property<string>("NameSpace")
                        .HasColumnType("text")
                        .HasComment("命名空间");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasComment("注释");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("更新时间");

                    b.Property<string>("Using")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("类引用的命名空间");

                    b.HasKey("Id");

                    b.HasIndex("MaidId");

                    b.HasIndex("Name", "MaidId")
                        .IsUnique();

                    b.ToTable("ClassDefinitions", t =>
                        {
                            t.HasComment("类定义");
                        });
                });

            modelBuilder.Entity("Models.CodeMaid.EnumDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("创建时间");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("是否有效");

                    b.Property<string>("LeadingTrivia")
                        .HasColumnType("text")
                        .HasComment("前导");

                    b.Property<long?>("MaidId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("枚举名");

                    b.Property<string>("NameSpace")
                        .HasColumnType("text")
                        .HasComment("命名空间");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasComment("注释");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("更新时间");

                    b.HasKey("Id");

                    b.HasIndex("MaidId");

                    b.ToTable("EnumDefinitions", t =>
                        {
                            t.HasComment("枚举定义");
                        });
                });

            modelBuilder.Entity("Models.CodeMaid.EnumMemberDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("创建时间");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasComment("描述");

                    b.Property<long?>("EnumDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("是否有效");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("枚举名称");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasComment("注释");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("更新时间");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasComment("枚举值");

                    b.HasKey("Id");

                    b.HasIndex("EnumDefinitionId");

                    b.ToTable("EnumMemberDefinitions", t =>
                        {
                            t.HasComment("枚举成员定义");
                        });
                });

            modelBuilder.Entity("Models.CodeMaid.Maid", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Autonomous")
                        .HasColumnType("boolean")
                        .HasComment("是否自动修复");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("创建时间");

                    b.Property<string>("DestinationPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("目标路径");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("是否有效");

                    b.Property<int>("MaidWork")
                        .HasColumnType("integer")
                        .HasComment("功能(0-配置同步功能,1-DTO同步,2-HTTP客户端生成,3-controller同步,4-生成 Masstransit Consumer)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("名称");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<JsonDocument>("Setting")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasComment("设置");

                    b.Property<string>("SourcePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("原路径");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("更新时间");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Maids", t =>
                        {
                            t.HasComment("功能");
                        });
                });

            modelBuilder.Entity("Models.CodeMaid.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AddEnumRemark")
                        .HasColumnType("boolean")
                        .HasComment("是否添加枚举的remark信息");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("创建时间");

                    b.Property<string>("GitBranch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Git分支");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("是否有效");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("项目名");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("项目路径");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("更新时间");

                    b.HasKey("Id");

                    b.ToTable("Projects", t =>
                        {
                            t.HasComment("项目定义");
                        });
                });

            modelBuilder.Entity("Models.CodeMaid.PropertyDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClassDefinitionId")
                        .HasColumnType("bigint")
                        .HasComment("所属类Id");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("创建时间");

                    b.Property<long?>("EnumDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<string>("FullText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("完整文本内容");

                    b.Property<string>("Get")
                        .HasColumnType("text")
                        .HasComment("Get方法体");

                    b.Property<bool>("HasGet")
                        .HasColumnType("boolean")
                        .HasComment("是否包含Get");

                    b.Property<bool>("HasSet")
                        .HasColumnType("boolean")
                        .HasComment("是否包含Set");

                    b.Property<string>("Initializer")
                        .HasColumnType("text")
                        .HasComment("初始化器");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("是否有效");

                    b.Property<bool>("IsEnum")
                        .HasColumnType("boolean")
                        .HasComment("是否是枚举");

                    b.Property<string>("LeadingTrivia")
                        .HasColumnType("text")
                        .HasComment("前导");

                    b.Property<string>("Modifiers")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("修饰符");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("属性名称");

                    b.Property<string>("Remark")
                        .HasColumnType("text")
                        .HasComment("备注");

                    b.Property<string>("Set")
                        .HasColumnType("text")
                        .HasComment("Set方法体");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasComment("注释");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("数据类型");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("更新时间");

                    b.HasKey("Id");

                    b.HasIndex("ClassDefinitionId");

                    b.HasIndex("EnumDefinitionId");

                    b.HasIndex("Name", "ClassDefinitionId")
                        .IsUnique();

                    b.ToTable("PropertyDefinitions", t =>
                        {
                            t.HasComment("类定义");
                        });
                });

            modelBuilder.Entity("Models.CodeMaid.AttributeDefinition", b =>
                {
                    b.HasOne("Models.CodeMaid.PropertyDefinition", "PropertyDefinition")
                        .WithMany("Attributes")
                        .HasForeignKey("PropertyDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyDefinition");
                });

            modelBuilder.Entity("Models.CodeMaid.ClassDefinition", b =>
                {
                    b.HasOne("Models.CodeMaid.Maid", "Maid")
                        .WithMany("Classes")
                        .HasForeignKey("MaidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maid");
                });

            modelBuilder.Entity("Models.CodeMaid.EnumDefinition", b =>
                {
                    b.HasOne("Models.CodeMaid.Maid", null)
                        .WithMany("Enums")
                        .HasForeignKey("MaidId");
                });

            modelBuilder.Entity("Models.CodeMaid.EnumMemberDefinition", b =>
                {
                    b.HasOne("Models.CodeMaid.EnumDefinition", null)
                        .WithMany("EnumMembers")
                        .HasForeignKey("EnumDefinitionId");
                });

            modelBuilder.Entity("Models.CodeMaid.Maid", b =>
                {
                    b.HasOne("Models.CodeMaid.Project", "Project")
                        .WithMany("Maids")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Models.CodeMaid.PropertyDefinition", b =>
                {
                    b.HasOne("Models.CodeMaid.ClassDefinition", "ClassDefinition")
                        .WithMany("Properties")
                        .HasForeignKey("ClassDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.CodeMaid.EnumDefinition", "EnumDefinition")
                        .WithMany()
                        .HasForeignKey("EnumDefinitionId");

                    b.Navigation("ClassDefinition");

                    b.Navigation("EnumDefinition");
                });

            modelBuilder.Entity("Models.CodeMaid.ClassDefinition", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Models.CodeMaid.EnumDefinition", b =>
                {
                    b.Navigation("EnumMembers");
                });

            modelBuilder.Entity("Models.CodeMaid.Maid", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Enums");
                });

            modelBuilder.Entity("Models.CodeMaid.Project", b =>
                {
                    b.Navigation("Maids");
                });

            modelBuilder.Entity("Models.CodeMaid.PropertyDefinition", b =>
                {
                    b.Navigation("Attributes");
                });
#pragma warning restore 612, 618
        }
    }
}
